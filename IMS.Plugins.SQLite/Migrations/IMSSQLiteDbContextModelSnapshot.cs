// <auto-generated />
using System;
using IMS.Plugins.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMS.Plugins.SQLite.Migrations
{
    [DbContext(typeof(IMSSQLiteDbContext))]
    partial class IMSSQLiteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.16");

            modelBuilder.Entity("IMS.CoreBusiness.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InventoryName")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InventoryId = 100,
                            InventoryName = "Item A",
                            Price = 5.0,
                            Quantity = 10,
                            SourceId = 1
                        },
                        new
                        {
                            Id = 2,
                            InventoryId = 200,
                            InventoryName = "Item B",
                            Price = 10.0,
                            Quantity = 20,
                            SourceId = 3
                        },
                        new
                        {
                            Id = 3,
                            InventoryId = 300,
                            InventoryName = "Item C",
                            Price = 7.5,
                            Quantity = 15,
                            SourceId = 5
                        },
                        new
                        {
                            Id = 4,
                            InventoryId = 400,
                            InventoryName = "Item D",
                            Price = 12.5,
                            Quantity = 8,
                            SourceId = 7
                        });
                });

            modelBuilder.Entity("IMS.CoreBusiness.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Source");
                });

            modelBuilder.Entity("IMS.Plugins.SQLite.Accessory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Version")
                        .HasColumnType("REAL");

                    b.HasKey("Name");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("IMS.CoreBusiness.Models.ContactSource", b =>
                {
                    b.HasBaseType("IMS.CoreBusiness.Models.Source");

                    b.Property<string>("ContactName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ContactSource");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Name = "Contact 1",
                            ContactName = "John Doe",
                            PhoneNumber = "555-1234"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Contact 2",
                            ContactName = "Jane Smith",
                            PhoneNumber = "555-5678"
                        });
                });

            modelBuilder.Entity("IMS.CoreBusiness.Models.LocationSource", b =>
                {
                    b.HasBaseType("IMS.CoreBusiness.Models.Source");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("LocationSource");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Location 1",
                            Address = "123 Main St"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Location 2",
                            Address = "456 Oak St"
                        });
                });

            modelBuilder.Entity("IMS.CoreBusiness.Models.SelfObtainedSource", b =>
                {
                    b.HasBaseType("IMS.CoreBusiness.Models.Source");

                    b.Property<string>("Process")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SelfObtainedSource");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Name = "Self Obtained 1",
                            Process = "Manual"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Self Obtained 2",
                            Process = "Automated"
                        });
                });

            modelBuilder.Entity("IMS.CoreBusiness.Models.StoreSource", b =>
                {
                    b.HasBaseType("IMS.CoreBusiness.Models.Source");

                    b.Property<string>("StoreName")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("StoreSource");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Store 1",
                            StoreName = "Best Mart"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Store 2",
                            StoreName = "Super Store"
                        });
                });

            modelBuilder.Entity("IMS.CoreBusiness.Models.Inventory", b =>
                {
                    b.HasOne("IMS.CoreBusiness.Models.Source", "Source")
                        .WithMany("Inventories")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("IMS.CoreBusiness.Models.Source", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
