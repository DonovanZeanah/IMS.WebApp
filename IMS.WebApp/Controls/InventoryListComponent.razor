
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
<table class="table">
    <thead>
        <tr>
      <th>Inventory Name</th>
            <th>Inventory Quantity</th>
            <th>Inventory Price</th>
            <th> </th>
      @*<th>Inventory Category</th>
            <th>Inventory Location</th>
            <th>Inventory Date</th>
            <th>Inventory Status</th>
            <th>Inventory Image</th>
            <th>Inventory Action</th>*@
        </tr>
    </thead>
    <tbody>
        @foreach(var inv in listInventories)
        {
            <tr>
                <td>@inv.InventoryName</td>
                <td>@inv.Quantity</td>
                <td>@inv.Price</td>
                <td>
                    <button
                        type="button "class="btn btn-light"></button>
                </td>
            </tr>
        }
    </tbody>
</table>
@code {
  private List<Inventory> listInventories = new List<Inventory>();

  [Parameter]
  public String SearchTerm { get; set; } = string.Empty;

  protected override async Task OnParametersSetAsync()
  {
    listInventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(this.SearchTerm)).ToList();
  }
}
